version: '3'
services:
    web-router: 
      build:
        context: ./
        dockerfile: Dockerfile
      restart: always
      ports:
        - "80:80"
      networks:
        testnginx:
          ipv4_address: 192.168.1.100

    database:
      image: postgres:latest
      restart: always
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password1
        POSTGRES_DB: rest_api
      ports:
        - "5432:5432"
      volumes:
        - ./restapi/db/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
        - ./restapi/db/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      networks:
        testnginx:
          ipv4_address: 192.168.1.101

    frontend:
      build:
        context: ./react/
        dockerfile: Dockerfile
      restart: always
      container_name: frontend
      volumes:
          - ./react/build :/usr/share/nginx/html
      ports: 
        - "8080:80"
      depends_on:
        - webapi
        - database
        - web-router
      networks:
        testnginx:
          ipv4_address: 192.168.1.102

    webapi:
        image: golang:latest
        restart: always
        container_name: webapi
        ports:
          - "8081:8081"
        volumes:
          - ./restapi/go :/go/src/
        command: >
          sh -c " 
            apk update
            apk add git
            go get "github.com/gorilla/mux"
            go get "github.com/lib/pq"
            go run /go/src/main.go"
        depends_on:
          - database
          - web-router
        networks: 
          testnginx:
            ipv4_address: 192.168.1.103
        
networks:
  testnginx:
    driver: bridge
    ipam:
      driver: default
      config:
         - subnet: 192.168.1.0/24
      